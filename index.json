{
  "general/README.html": {
    "href": "general/README.html",
    "title": "General Documentation | QuickStart Documentation",
    "keywords": "General Documentation The General documentation section covers topics such as Architectural Decisions, Getting Started, and Guidelines for these docs. For information on how to use the functionality, look at the Services section. Table of Contents Architecture decisions Getting Started Guidelines"
  },
  "general/architecture-decisions/README.html": {
    "href": "general/architecture-decisions/README.html",
    "title": "Architecture Decisions | QuickStart Documentation",
    "keywords": "Architecture Decisions Information about Architectural Decisions... Tip ADR style used: CSE Playbook - Design Reviews. Part1 - TaskManager Exploring concepts: Domain Driven Design (kind of); Service/Controller layer -> Infrastructure layer -> Domain/Model layer. Separation through interfaces that could be improved with CDI/IoC. Repository + DAO combination that would allow better disconnection after IoC is implemented DTOs; looking at how to structure DTOs with the inheritance hierarchy of this assignment Immutable Builder pattern in Model classes Inheritance in testing - Extending classes and implementing interfaces to create mock objects for tests. Attempting to use inheritance in testing to avoid creating minimal excess to the classes Encapsulation in regards to tests - standard practice seems to be a separate assembly for tests - internal classes can be accessed with [assembly: InternalsVisibleTo(\"TestingProject.Tests\")] Writing C# 7.3 for .Net framework 4.8 (have been working with the conveniences of C#11+ up until now) Casting, implcit and explicit (coercion), a.GetType() == typeof(Clazz), is, as, is with explicit cast (a is Clazz b), user-defined conversion operators (static implicit/explicit operator extension methods) Part2 - Binary Files Structure used for the InMemoryStore (Memory namespace) has been copied to the BinaryFiles namespace - In practise, it would be one or the other for these \"persistence\" implementations, hence the duplication of the whole hierarchy. A Subscribeable wrapper around a Dictionary is used for the cache instead of just a Dictionary - this allows the BinaryFileWriter classes to respond to updates to the cache by writing the updates. File data is read one time, at load. Data is accessed from the Cache from this point. Some implementation to limit the cache would be nice, keeping just recently accessed data in the cache. Part3 - Search & Index Indexable Subscribeable Dictionary to proivde search and indexing functions. Crude console UI to provide some way to interact with the task manager api Tests TaskManagerCore.XunitTests Package contains Unit tests for the relevant classes TaskManagerConsoleApp package contains an 'integration' test Requirements Implement Task object (Must inlcude immutable GUID Id, description, notes, completed flag, optional due date, overdue calculation) -- The TaskData object is implemented as an Immutable class in the Model layer, and as a mutable entity class (besides Id) in the Infrastructure layer. The Id is protected from mutation inside the infrastructure layer since access to the package from outside is through a domain layer interface, obfuscating/decoupling persistence implementation behind. Implement repeating and repeating with streaks sub-classes -- Similar to above Implement Folders (with Name and List of Task Id's, Total of Incomplete tasks in folder, add task method, remove task method) for tasks to be viewed through / grouped by. -- The Total Count of Incomplete tasks in the folder has been shifted up the hierarchy and is currently handled at the controller level. (Interpreting the brief, it seems like the calculation is supposed to exist in the Folder class, however this would add some weight to what is currently a lightweight class. Implement static database; to be switched out for real database -- Started out with static holders, have switched around a bit to explore some various ideas/structures around the infrastructure/persistence layer."
  },
  "general/architecture-decisions/decision-log.html": {
    "href": "general/architecture-decisions/decision-log.html",
    "title": "Decision Log | QuickStart Documentation",
    "keywords": "Decision Log This document is used to track key decisions that are made during the course of the project. This can be used at a later stage to understand why decisions were made and by whom. Decision Date Alternatives Considered Reasoning Detailed doc Made By Work Required Domain Driven Design 01/03/2024 MVC, MVVM, Flat structure Explore DDD in C# and .NET ... JM Review and Fix Write Documentation 07/04/2024 Fail Assignment Task Manager Part 4 Requires Documentation of the application These Docs JM Review"
  },
  "general/getting-started/README.html": {
    "href": "general/getting-started/README.html",
    "title": "Getting Started with the TaskManagerCore | QuickStart Documentation",
    "keywords": "Getting Started with the TaskManagerCore View the codebase at TaskManagerCore @ Github. Tip Checkout the TaskController Quick Start The following C# code may be sufficient to get up and running with the TaskManagerCore. using TaskManagerCore; using TaskManagerCore.Controller; using TaskManagerCore.Model; using TaskManagerCore.Model.Dto; namespace MyApp { class TaskManagerSample { private readonly TaskController TaskManager = TaskManagerFactory.CreateDefaultTaskManager(); public void CreateFolderAndTask() { TaskManager.CreateTaskFolder(new CreateFolderDto(\"Work\")); // Folder called 'work' TaskManager.CreateTaskFolder(new CreateFolderDto(\"School\")); // Folder called 'school' var task = new CreateTaskDto(TaskType.SINGLE, \"work\", // folder created above (case-insensitive) \"A new task\", \"\", DateTime.Now.AddDays(1) ); // Creating a Task var taskId = TaskManager.CreateTask(task); // Updating Task data var success = TaskManager.UpdateTaskProperty(taskId, \"description\", \"Project Due\"); // Move a Task to another folder var success1 = TaskManager.MoveTask(taskId, \"work\", \"school\"); // from 'work' to 'school' folder // Complete a task var success2 = TaskManager.CompleteTask(taskId); // Check incomplete task count var incompleteCount = TaskManager.CountIncompleteInFolder(\"school\"); } } } References DocFX - static documentation generator Providing quality documentation in your project with DocFx and Companion Tools"
  },
  "general/getting-started/copy-code-button.html": {
    "href": "general/getting-started/copy-code-button.html",
    "title": "Copy code button | QuickStart Documentation",
    "keywords": "Copy code button Styling and a script was added to show a \"Copy Code\" button on code blocks in the browser. You can see the result below. Once you have copied the code, the button is checked: The real thing On the website you can try it yourself: using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } } }"
  },
  "general/guidelines/README.html": {
    "href": "general/guidelines/README.html",
    "title": "Guidelines | QuickStart Documentation",
    "keywords": "Guidelines Guidelines for expanding this Documentation. Fundamentals Naming Branches Fundamentals Documentation guidelines Naming Branches Tip Each part of the assignment gets a new branch in the repository. eg. \"part2\"."
  },
  "general/guidelines/docs-guidelines.html": {
    "href": "general/guidelines/docs-guidelines.html",
    "title": "Documentation guidelines | QuickStart Documentation",
    "keywords": "Documentation guidelines Folder structure All documentation is stored in the /docs folder. general/architecture-decisions - All architecture decisions are documented here. Everything lands in the decision log in the root of the docs folder. All decisions that need more explanation than a one line will have separate docs here. general/getting-started - Limited documentation with the purpose of helping new people on the team to get started and setup. general/guidelines - General guidelines for the project. services - All documentation on services and their usage - important for developers. Tip Prevent creating folders in the root level as much as possible. Markdownlint Standard documentation is writting using Markdown files (MD). Markdownlint should be used to check for properly structured markdown syntax. This is needed for the generation of static HTML documentation. You can use Mardownlint extension for Visual Studio code to get these checks and helps while you type in Visual Studio code. Use of images and other attachments If you are writing a document and you have images or other files attached to that document, these extra files must be place in the /docs/.attachments folder. This is because of how DocFX is working, which is being used to generate documentation including API documentation from the source code. Also, the DocLinkChecker tool uses this location to validate documents versus attachments for orphaned items."
  },
  "index.html": {
    "href": "index.html",
    "title": "TaskManager Documentation | QuickStart Documentation",
    "keywords": "TaskManager Documentation The Task Manager is a multi-part assignment for North Metro TAFE C# OOP Unit, part of the Diploma of ICT - Advanced Programming. This documentation is part of Part 4 of the assessment; documentating usage of the code so far. These docs have been created using DocFX to generate a static website. An alternate set of docs have been created using Sandcastle, however the results of docFx were preferable. An attempt to manually write docs in Markdown using Obsidian, however this was abandoned due to the inability to keep in sync with the codebase. Tip TLDR; This project was created for an Assignment Quick Start The following C# code may be sufficient to get up and running with the TaskManagerCore. using TaskManagerCore; using TaskManagerCore.Controller; using TaskManagerCore.Model; using TaskManagerCore.Model.Dto; namespace MyApp { class TaskManagerSample { private readonly TaskController TaskManager = TaskManagerFactory.CreateDefaultTaskManager(); public void CreateFolderAndTask() { TaskManager.CreateTaskFolder(new CreateFolderDto(\"Work\")); // Folder called 'work' TaskManager.CreateTaskFolder(new CreateFolderDto(\"School\")); // Folder called 'school' var task = new CreateTaskDto(TaskType.SINGLE, \"work\", // folder created above (case-insensitive) \"A new task\", \"\", DateTime.Now.AddDays(1) ); // Creating a Task var taskId = TaskManager.CreateTask(task); // Updating Task data var success = TaskManager.UpdateTaskProperty(taskId, \"description\", \"Project Due\"); // Move a Task to another folder var success1 = TaskManager.MoveTask(taskId, \"work\", \"school\"); // from 'work' to 'school' folder // Complete a task var success2 = TaskManager.CompleteTask(taskId); // Check incomplete task count var incompleteCount = TaskManager.CountIncompleteInFolder(\"school\"); } } } Overview of Docs General Documentation Service Documentation TaskController Documentation TaskManagerCore Namespace Reference Project structure 📂TaskManager // root 📂BinaryFileHandler // for Assessment Part 2 - Binary File Handling 📂docs // documentation root 📂_site // documentation site 📄These Docs 📂InMemoryCache // for Assessment Part 3 - Indexing 📂InMemoryCache.XunitTests // for testing Part 3 📂TaskManagerConsoleApp // for Assessment Part 1 - Console output 📂TaskManagerCore // Application core 📂TaskManagerCore.XunitTests // tests for application core 📄TaskManager.sln // Visual Studio Solution file 📄readme.md // original Readme file"
  },
  "reference/TaskManagerCore.Configuration.ICrudRepository-2.html": {
    "href": "reference/TaskManagerCore.Configuration.ICrudRepository-2.html",
    "title": "Interface ICrudRepository<T, ID> | QuickStart Documentation",
    "keywords": "Interface ICrudRepository<T, ID> Generic CRUD Repository Interface Namespace: TaskManagerCore.Configuration Assembly: TaskManagerCore.dll Syntax public interface ICrudRepository<T, ID> where T : class Type Parameters Name Description T Type of the repository object ID Type of the repository object's ID Methods Delete(ID) Deletes the object with the specified ID. Declaration bool Delete(ID id) Parameters Type Name Description ID id The ID of the object to delete. Returns Type Description bool true if the object was successfully deleted; otherwise, false. FindAll() Retrieves all objects stored in the repository. Declaration List<T> FindAll() Returns Type Description List<T> A list of T objects, or an empty list if no objects are found. FindById(ID) Retrieves an object by its ID. Declaration T? FindById(ID id) Parameters Type Name Description ID id The ID of the object to retrieve. Returns Type Description T The T object found with the specified ID, or null if no matching object is found. FindByIds(List<ID>) Retrieves all objects matching the provided IDs from the repository. Declaration List<T> FindByIds(List<ID> ids) Parameters Type Name Description List<ID> ids A list of IDs to match. Returns Type Description List<T> A list of T objects, or an empty list if no matching objects are found. Save(T) Saves the provided object and returns its ID. Declaration ID Save(T o) Parameters Type Name Description T o The object to save. Returns Type Description ID The ID of the saved object."
  },
  "reference/TaskManagerCore.Configuration.html": {
    "href": "reference/TaskManagerCore.Configuration.html",
    "title": "Namespace TaskManagerCore.Configuration | QuickStart Documentation",
    "keywords": "Namespace TaskManagerCore.Configuration Interfaces ICrudRepository<T, ID> Generic CRUD Repository Interface"
  },
  "reference/TaskManagerCore.Controller.TaskController.html": {
    "href": "reference/TaskManagerCore.Controller.TaskController.html",
    "title": "Class TaskController | QuickStart Documentation",
    "keywords": "Class TaskController The TaskController class provides an API to all functionality of the TaskManager-Core system. Inheritance object TaskController Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore.Controller Assembly: TaskManagerCore.dll Syntax public class TaskController Examples /** * The following example demonstrates basic usage of the TaskController class */ using TaskManagerCore; using TaskManagerCore.Controller; using TaskManagerCore.Model; using TaskManagerCore.Model.Dto; namespace MyApp { class TaskManagerSample { private readonly TaskController TaskManager = TaskManagerFactory.CreateDefaultTaskManager(); public void BasicFolderActions() { var folder = new CreateFolderDto(\"Work\"); string id = TaskManager.CreateTaskFolder(folder); GetFolderDto? folderByName = TaskManager.GetTaskFolder(\"work\"); GetFolderDto? folderById = TaskManager.GetTaskFolderById(id); bool success = TaskManager.DeleteTaskFolder(folderByName!.Name); } public void BasicTaskActions() { var task = new CreateTaskDto(TaskType.SINGLE, \"work\", // case-insensitive \"A new task\", \"This task is for testing purposes\", DateTime.Now.AddDays(1) ); string id = TaskManager.CreateTask(task); TaskManager.CompleteTask(id); bool success = TaskManager.DeleteTaskFromFolder(\"work\", id); } public void ListTasksAndFolders() { List<GetFolderDto> allFolders = TaskManager.GetTaskFolders(); List<GetTaskDto> allTasks = TaskManager.GetTasks(); } } } /** * The following example demonstrates overriding default Persistence behavior * - Replace Persistence layer: implement ITaskDataRepository and ITaskFolderRepostory * - Provide instances to TaskController constructor. */ using TaskManagerCore.Model.Repository; using TaskManagerCore.Controller; namespace MyApp { class TaskManagerBuilder { public void CreateTaskManagerWithOtherPersistence() { ITaskDataRepository taskRepository = new MySqliteTaskRepository(); ITaskFolderRepository folderRepository = new MySqliteFolderRepository(); var controller = new TaskController(taskRepository, folderRepository); } } } Constructors TaskController(ITaskDataRepository, ITaskFolderRepository) The only TaskController constructor Declaration public TaskController(ITaskDataRepository taskDataRepository, ITaskFolderRepository taskFolderRepository) Parameters Type Name Description ITaskDataRepository taskDataRepository Implementation of ITaskDataRepository ITaskFolderRepository taskFolderRepository Implementation of ITaskFolderRepository Methods CompleteTask(string, bool) Sets a task to Complete = true by default. Can be used to set completed to false Declaration public bool CompleteTask(string id, bool completed = true) Parameters Type Name Description string id bool completed Returns Type Description bool Exceptions Type Condition Exception CountIncomplete(string) This method is spec'd in the TaskFolder class however it doesn't seem unreasonable to shift it up a few levels to avoid the reference between the two entities. Declaration public long CountIncomplete(string folderId) Parameters Type Name Description string folderId Returns Type Description long Exceptions Type Condition Exception CreateTask(CreateTaskDto) Create a new Task in a specified TaskFolder (with the TaskFolder Id) Declaration public string CreateTask(CreateTaskDto dto) Parameters Type Name Description CreateTaskDto dto Returns Type Description string Exceptions Type Condition Exception CreateTaskFolder(CreateFolderDto) Create a new TaskFolder Declaration public string CreateTaskFolder(CreateFolderDto dto) Parameters Type Name Description CreateFolderDto dto Returns Type Description string Exceptions Type Condition Exception DeleteTask(string) Note: Method currently untested Declaration public bool DeleteTask(string taskId) Parameters Type Name Description string taskId Returns Type Description bool Exceptions Type Condition Exception DeleteTaskFolder(string) Delete a folder (must be empty) Declaration public bool DeleteTaskFolder(string folderId) Parameters Type Name Description string folderId Returns Type Description bool DeleteTaskFromFolder(string, string) Deletes a task, given folder Id and task Id, assumes that caller knows the folder Id, since they will be viewing tasks through the folders Declaration public bool DeleteTaskFromFolder(string folderId, string taskId) Parameters Type Name Description string folderId string taskId Returns Type Description bool GetTask(string) Get a Task using the Id of the Task Declaration public GetTaskDto? GetTask(string id) Parameters Type Name Description string id Returns Type Description GetTaskDto GetTaskFolder(string) Get a Task Folder (with the TaskFolder Id) Declaration public GetFolderDto? GetTaskFolder(string folderId) Parameters Type Name Description string folderId Returns Type Description GetFolderDto GetTaskFolders() Get All Task Folders Declaration public List<GetFolderDto> GetTaskFolders() Returns Type Description List<GetFolderDto> GetTasks() Get All Tasks managed in the system Declaration public List<GetTaskDto> GetTasks() Returns Type Description List<GetTaskDto> GetTasks(List<string>) Overload of GetTasks() Get List of tasks by id's Use to get task data from list in folder Declaration public List<GetTaskDto> GetTasks(List<string> ids) Parameters Type Name Description List<string> ids Returns Type Description List<GetTaskDto> MoveTask(string, string, string) Move a Task from one TaskFolder to another (with Task Id, and TaskFolder Id's) Declaration public bool MoveTask(string taskId, string fromFolderId, string toFolderId) Parameters Type Name Description string taskId string fromFolderId string toFolderId Returns Type Description bool Exceptions Type Condition Exception UpdateFolderProperty(string, string, object) Update modifiable properties Folder Declaration public string UpdateFolderProperty(string id, string property, object value) Parameters Type Name Description string id string property object value Returns Type Description string Exceptions Type Condition Exception UpdateTaskProperty(string, string, object) Update modifiable properties Task Declaration public string UpdateTaskProperty(string id, string property, object value) Parameters Type Name Description string id string property object value Returns Type Description string Exceptions Type Condition Exception"
  },
  "reference/TaskManagerCore.Controller.html": {
    "href": "reference/TaskManagerCore.Controller.html",
    "title": "Namespace TaskManagerCore.Controller | QuickStart Documentation",
    "keywords": "Namespace TaskManagerCore.Controller Classes TaskController The TaskController class provides an API to all functionality of the TaskManager-Core system."
  },
  "reference/TaskManagerCore.Model.Dto.CreateFolderDto.html": {
    "href": "reference/TaskManagerCore.Model.Dto.CreateFolderDto.html",
    "title": "Class CreateFolderDto | QuickStart Documentation",
    "keywords": "Class CreateFolderDto Data Transfer Object (DTO) representing a new folder. Inheritance object CreateFolderDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore.Model.Dto Assembly: TaskManagerCore.dll Syntax public class CreateFolderDto Constructors CreateFolderDto(string) Initializes a new instance of the CreateFolderDto class. Declaration public CreateFolderDto(string name) Parameters Type Name Description string name The name of the folder. Exceptions Type Condition ArgumentNullException Thrown when name is null. Properties Name Declaration public string Name { get; } Property Value Type Description string The Name for the new folder"
  },
  "reference/TaskManagerCore.Model.Dto.CreateTaskDto.html": {
    "href": "reference/TaskManagerCore.Model.Dto.CreateTaskDto.html",
    "title": "Class CreateTaskDto | QuickStart Documentation",
    "keywords": "Class CreateTaskDto Data Transfer Object (DTO) representing a new task. Inheritance object CreateTaskDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore.Model.Dto Assembly: TaskManagerCore.dll Syntax public class CreateTaskDto Constructors CreateTaskDto(string, string, string, DateTime?, TimeInterval, bool) Initializes a new instance of the CreateTaskDto class without a TaskType specified. Declaration public CreateTaskDto(string folderId, string description, string notes, DateTime? dueDate = null, TimeInterval interval = TimeInterval.None, bool trackStreaks = false) Parameters Type Name Description string folderId The ID of the folder in which the task will be created. string description The description of the task. string notes Additional notes for the task. DateTime? dueDate The due date of the task. (Optional) TimeInterval interval The repeat interval for the task. (Optional) bool trackStreaks A boolean value indicating whether to track streaks for the task. (Optional) Exceptions Type Condition ArgumentNullException Thrown when folderId or description is null. CreateTaskDto(TaskType, string, string, string, DateTime?, TimeInterval) Initializes a new instance of the CreateTaskDto class with a TaskType to specify type. Declaration public CreateTaskDto(TaskType type, string folderId, string description, string notes, DateTime? dueDate = null, TimeInterval interval = TimeInterval.None) Parameters Type Name Description TaskType type The task type (SINGLE, REPEATING, or REPEATING_STREAK) string folderId The parent folder for the task (Folder Id or Name) string description The task description string notes Additional notes for the task. DateTime? dueDate The due date of the task. TimeInterval interval The repeating interval for the task. Exceptions Type Condition ArgumentNullException Thrown when folderId or description is null. Properties Description Declaration public string Description { get; } Property Value Type Description string The description of the new task being created. Remarks A Description must be provided for a new Task. DueDate Declaration public DateTime? DueDate { get; } Property Value Type Description DateTime? Due Date for the task being created. Remarks A Due Date is not required for a Regular/SINGLE Task A Due Date in the past is accepted A Due Date is required for a REPEATING and Habitual/REPEATING_STREAK Task InFolderId Declaration public string InFolderId { get; } Property Value Type Description string The identifier for the TaskFolder the new TaskData will be created in. Remarks This can be TaskFolder.Id or TaskFolder.Name as both are unique in the database. Notes Declaration public string Notes { get; } Property Value Type Description string Notes for the new task being created. RepeatInterval Declaration public TimeInterval? RepeatInterval { get; } Property Value Type Description TimeInterval? Repeating interval for the task, if applicable. Remarks The TimeInterval enum uses int values based on hour value. The following TaskType's require a RepeatInterval TaskType Declaration public TaskType TaskType { get; } Property Value Type Description TaskType The type of task that is being created, from the TaskType enum."
  },
  "reference/TaskManagerCore.Model.Dto.GetFolderDto.html": {
    "href": "reference/TaskManagerCore.Model.Dto.GetFolderDto.html",
    "title": "Class GetFolderDto | QuickStart Documentation",
    "keywords": "Class GetFolderDto Data Transfer Object (DTO) representing a folder entity retrieved from the system. Inheritance object GetFolderDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore.Model.Dto Assembly: TaskManagerCore.dll Syntax public class GetFolderDto Constructors GetFolderDto(string, string, List<string>) Initializes a new instance of the GetFolderDto class with the specified parameters. Declaration public GetFolderDto(string id, string name, List<string> taskIds) Parameters Type Name Description string id The unique identifier of the folder. string name The unique name of the folder. List<string> taskIds The list of unique identifiers of tasks associated with the folder. Properties Id Declaration public string Id { get; } Property Value Type Description string The unique identifier of the folder. Name Declaration public string Name { get; } Property Value Type Description string The unique name of the folder. TaskIds Declaration public List<string> TaskIds { get; } Property Value Type Description List<string> The list of unique identifiers of tasks associated with the folder."
  },
  "reference/TaskManagerCore.Model.Dto.GetTaskDto.html": {
    "href": "reference/TaskManagerCore.Model.Dto.GetTaskDto.html",
    "title": "Class GetTaskDto | QuickStart Documentation",
    "keywords": "Class GetTaskDto Inheritance object GetTaskDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore.Model.Dto Assembly: TaskManagerCore.dll Syntax public class GetTaskDto Constructors GetTaskDto(TaskType, string, string, string, bool, DateTime?, bool, string?) Initializes a new instance of the GetTaskDto class with the specified parameters. Declaration public GetTaskDto(TaskType type, string id, string description, string notes, bool completed, DateTime? dueDate = null, bool overdue = false, string? folderId = null) Parameters Type Name Description TaskType type The type of the task. string id The unique identifier of the task. string description The description of the task. string notes The additional notes associated with the task. bool completed A value indicating whether the task is completed. DateTime? dueDate The due date of the task, if any. bool overdue A value indicating whether the task is overdue. string folderId The identifier of the folder to which the task belongs. Properties Completed Declaration public bool Completed { get; } Property Value Type Description bool A value indicating whether the task is completed. Description Declaration public string Description { get; } Property Value Type Description string The description of the task. DueDate Declaration public DateTime? DueDate { get; } Property Value Type Description DateTime? The due date of the task, if any. Id Declaration public string Id { get; } Property Value Type Description string The unique identifier of the task. InFolderId Declaration public string? InFolderId { get; } Property Value Type Description string The identifier of the folder to which the task belongs. Notes Declaration public string Notes { get; } Property Value Type Description string The additional notes associated with the task. Overdue Declaration public bool Overdue { get; } Property Value Type Description bool A value indicating whether the task is overdue. Type Declaration public TaskType Type { get; } Property Value Type Description TaskType The type of the task. XData Declaration public Dictionary<string, string> XData { get; } Property Value Type Description Dictionary<string, string> The additional data associated with the task, stored in a dictionary. Methods AddExtraData(Dictionary<string, string>) Adds multiple key-value pairs of extra data to the task. Declaration public void AddExtraData(Dictionary<string, string> xData) Parameters Type Name Description Dictionary<string, string> xData The dictionary containing the additional data to add. AddExtraData(string, string) Adds a key-value pair of extra data to the task. Declaration public void AddExtraData(string key, string value) Parameters Type Name Description string key The key of the extra data. string value The value of the extra data. WithExtraData(Dictionary<string, string>) Creates a new instance of GetTaskDto with additional data. Declaration public GetTaskDto WithExtraData(Dictionary<string, string> xData) Parameters Type Name Description Dictionary<string, string> xData The additional data associated with RepeatingTaskData and HabitualTaskData Returns Type Description GetTaskDto A new instance of GetTaskDto with the specified additional data."
  },
  "reference/TaskManagerCore.Model.Dto.html": {
    "href": "reference/TaskManagerCore.Model.Dto.html",
    "title": "Namespace TaskManagerCore.Model.Dto | QuickStart Documentation",
    "keywords": "Namespace TaskManagerCore.Model.Dto Classes CreateFolderDto Data Transfer Object (DTO) representing a new folder. CreateTaskDto Data Transfer Object (DTO) representing a new task. GetFolderDto Data Transfer Object (DTO) representing a folder entity retrieved from the system. GetTaskDto"
  },
  "reference/TaskManagerCore.Model.HabitualTaskData.html": {
    "href": "reference/TaskManagerCore.Model.HabitualTaskData.html",
    "title": "Class HabitualTaskData | QuickStart Documentation",
    "keywords": "Class HabitualTaskData Inheritance object TaskData RepeatingTaskData HabitualTaskData Inherited Members RepeatingTaskData.DueDate RepeatingTaskData.RepeatingInterval RepeatingTaskData.Repetitions TaskData.Id TaskData.Description TaskData.Notes TaskData.Completed TaskData.Overdue TaskData.IsOverdue() TaskData.WithDescription(string) TaskData.WithNotes(string) TaskData.WithDueDate(DateTime?) TaskData.ComparisonTime() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore.Model Assembly: TaskManagerCore.dll Syntax public class HabitualTaskData : RepeatingTaskData Constructors HabitualTaskData(string, string, DateTime, TimeInterval) Declaration public HabitualTaskData(string description, string notes, DateTime dueDate, TimeInterval interval) Parameters Type Name Description string description string notes DateTime dueDate TimeInterval interval HabitualTaskData(string, string, string, bool, DateTime, TimeInterval, int, int) Declaration public HabitualTaskData(string id, string description, string notes, bool completed, DateTime dueDate, TimeInterval interval, int repititions, int streak) Parameters Type Name Description string id string description string notes bool completed DateTime dueDate TimeInterval interval int repititions int streak Properties Streak Declaration public int Streak { get; } Property Value Type Description int Methods WithCompleted(bool) Refactored the method to call the base method from the RepeatingTaskData, in this case a debatable action, but for inheritance exercise is appropriate? Declaration public override HabitualTaskData WithCompleted(bool value) Parameters Type Name Description bool value Returns Type Description HabitualTaskData Overrides RepeatingTaskData.WithCompleted(bool)"
  },
  "reference/TaskManagerCore.Model.RepeatingTaskData.html": {
    "href": "reference/TaskManagerCore.Model.RepeatingTaskData.html",
    "title": "Class RepeatingTaskData | QuickStart Documentation",
    "keywords": "Class RepeatingTaskData Inheritance object TaskData RepeatingTaskData HabitualTaskData Inherited Members TaskData.Id TaskData.Description TaskData.Notes TaskData.Completed TaskData.Overdue TaskData.IsOverdue() TaskData.WithDescription(string) TaskData.WithNotes(string) TaskData.WithDueDate(DateTime?) TaskData.ComparisonTime() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore.Model Assembly: TaskManagerCore.dll Syntax public class RepeatingTaskData : TaskData Constructors RepeatingTaskData(string, string, DateTime, TimeInterval) Declaration public RepeatingTaskData(string description, string notes, DateTime dueDate, TimeInterval interval) Parameters Type Name Description string description string notes DateTime dueDate TimeInterval interval RepeatingTaskData(string, string, string, bool, DateTime, TimeInterval, int) Declaration public RepeatingTaskData(string id, string description, string notes, bool completed, DateTime dueDate, TimeInterval interval, int repititions) Parameters Type Name Description string id string description string notes bool completed DateTime dueDate TimeInterval interval int repititions Properties DueDate Declaration public DateTime DueDate { get; } Property Value Type Description DateTime RepeatingInterval Declaration public TimeInterval RepeatingInterval { get; } Property Value Type Description TimeInterval Repetitions Declaration public int Repetitions { get; } Property Value Type Description int Methods WithCompleted(bool) RepeatingTaskData.WithCompleted() method to increment Repititions and the DueDate, rather than setting Completed = true Also update the DueDate Declaration public override RepeatingTaskData WithCompleted(bool value) Parameters Type Name Description bool value Returns Type Description RepeatingTaskData Overrides TaskData.WithCompleted(bool)"
  },
  "reference/TaskManagerCore.Model.Repository.ITaskDataRepository.html": {
    "href": "reference/TaskManagerCore.Model.Repository.ITaskDataRepository.html",
    "title": "Interface ITaskDataRepository | QuickStart Documentation",
    "keywords": "Interface ITaskDataRepository Inherited Members ICrudRepository<TaskData, string>.FindAll() ICrudRepository<TaskData, string>.FindByIds(List<string>) ICrudRepository<TaskData, string>.FindById(string) ICrudRepository<TaskData, string>.Save(TaskData) ICrudRepository<TaskData, string>.Delete(string) Namespace: TaskManagerCore.Model.Repository Assembly: TaskManagerCore.dll Syntax public interface ITaskDataRepository : ICrudRepository<TaskData, string> Methods FindByCompleted(bool) Declaration List<TaskData> FindByCompleted(bool completed) Parameters Type Name Description bool completed Returns Type Description List<TaskData> FindByDescription(string) Declaration List<TaskData> FindByDescription(string description) Parameters Type Name Description string description Returns Type Description List<TaskData> FindByDueDate(DateTime) Declaration List<TaskData> FindByDueDate(DateTime dueDate) Parameters Type Name Description DateTime dueDate Returns Type Description List<TaskData> FindByNotes(string) Declaration List<TaskData> FindByNotes(string notes) Parameters Type Name Description string notes Returns Type Description List<TaskData>"
  },
  "reference/TaskManagerCore.Model.Repository.ITaskFolderRepository.html": {
    "href": "reference/TaskManagerCore.Model.Repository.ITaskFolderRepository.html",
    "title": "Interface ITaskFolderRepository | QuickStart Documentation",
    "keywords": "Interface ITaskFolderRepository Inherited Members ICrudRepository<TaskFolder, string>.FindAll() ICrudRepository<TaskFolder, string>.FindByIds(List<string>) ICrudRepository<TaskFolder, string>.FindById(string) ICrudRepository<TaskFolder, string>.Save(TaskFolder) ICrudRepository<TaskFolder, string>.Delete(string) Namespace: TaskManagerCore.Model.Repository Assembly: TaskManagerCore.dll Syntax public interface ITaskFolderRepository : ICrudRepository<TaskFolder, string> Methods DeleteByName(string) Declaration bool DeleteByName(string name) Parameters Type Name Description string name Returns Type Description bool FindByName(string) Declaration TaskFolder? FindByName(string name) Parameters Type Name Description string name Returns Type Description TaskFolder FindByNameStartsWith(string) Declaration List<TaskFolder> FindByNameStartsWith(string name) Parameters Type Name Description string name Returns Type Description List<TaskFolder> FindEmpty() Declaration List<TaskFolder> FindEmpty() Returns Type Description List<TaskFolder> FindNotEmpty() Declaration List<TaskFolder> FindNotEmpty() Returns Type Description List<TaskFolder> FindOneByName(string) Declaration TaskFolder? FindOneByName(string name) Parameters Type Name Description string name Returns Type Description TaskFolder"
  },
  "reference/TaskManagerCore.Model.Repository.html": {
    "href": "reference/TaskManagerCore.Model.Repository.html",
    "title": "Namespace TaskManagerCore.Model.Repository | QuickStart Documentation",
    "keywords": "Namespace TaskManagerCore.Model.Repository Interfaces ITaskDataRepository ITaskFolderRepository"
  },
  "reference/TaskManagerCore.Model.TaskData.html": {
    "href": "reference/TaskManagerCore.Model.TaskData.html",
    "title": "Class TaskData | QuickStart Documentation",
    "keywords": "Class TaskData Immutable class (ie. 'record' after C# 9.0) - should it just be a struct? and should all business logic move up to an accessor/helper class? As per requirements: The Id does not have a publicly accessible setter (populated at construction and then passed through builder methods internally) Description, Notes, Completed, DueDate (Optional) Overdue method Structuring these classes for tests: Shift all date comparison logic up the hierarchy and keep this class lightweight, make another class handle and accept the date testing stuff Make this class accept a date provider object that can be controlled by the tests (will work but sullies the class with test related code) Inheritance object TaskData RepeatingTaskData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore.Model Assembly: TaskManagerCore.dll Syntax public class TaskData Constructors TaskData(string) Declaration public TaskData(string description) Parameters Type Name Description string description TaskData(string, string, DateTime?) Declaration public TaskData(string description, string notes, DateTime? dueDate = null) Parameters Type Name Description string description string notes DateTime? dueDate TaskData(string, string, string, bool, DateTime?) Declaration public TaskData(string id, string description, string notes, bool completed, DateTime? dueDate) Parameters Type Name Description string id string description string notes bool completed DateTime? dueDate Properties Completed Declaration public bool Completed { get; } Property Value Type Description bool Description Declaration public string Description { get; } Property Value Type Description string DueDate Declaration public DateTime? DueDate { get; } Property Value Type Description DateTime? Id Declaration public string Id { get; } Property Value Type Description string Notes Declaration public string Notes { get; } Property Value Type Description string Overdue Declaration public bool Overdue { get; } Property Value Type Description bool Methods ComparisonTime() Protected method that can be overridden for tests by extending class. Can be used to test the repeating and habitual classes Declaration protected virtual DateTime ComparisonTime() Returns Type Description DateTime IsOverdue() Calculates if Task is overdue, same result as 'Overdue' property Should this logic be here? Should this class stay as a lightweight, immutable model object, and get an accessor/wrapper class? Declaration public virtual bool IsOverdue() Returns Type Description bool WithCompleted(bool) Declaration public virtual TaskData WithCompleted(bool value) Parameters Type Name Description bool value Returns Type Description TaskData WithDescription(string) Declaration public virtual TaskData WithDescription(string value) Parameters Type Name Description string value Returns Type Description TaskData WithDueDate(DateTime?) Declaration public virtual TaskData WithDueDate(DateTime? value) Parameters Type Name Description DateTime? value Returns Type Description TaskData WithNotes(string) Declaration public virtual TaskData WithNotes(string value) Parameters Type Name Description string value Returns Type Description TaskData"
  },
  "reference/TaskManagerCore.Model.TaskFolder.html": {
    "href": "reference/TaskManagerCore.Model.TaskFolder.html",
    "title": "Class TaskFolder | QuickStart Documentation",
    "keywords": "Class TaskFolder Immutable class (use 'record' after C# 9.0?) Or make this a struct and shift the logic to an accessor... As per requirements: The Id does not have a publicly accessible setter (populated at construction and then passed through builder methods internally) Name, List of Task Id's Overdue method Inheritance object TaskFolder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore.Model Assembly: TaskManagerCore.dll Syntax public class TaskFolder Constructors TaskFolder(string) Declaration public TaskFolder(string name) Parameters Type Name Description string name TaskFolder(string, string, List<string>) Declaration public TaskFolder(string id, string name, List<string> taskIds) Parameters Type Name Description string id string name List<string> taskIds Properties Id Declaration public string Id { get; } Property Value Type Description string Name Declaration public string Name { get; } Property Value Type Description string TaskIds Declaration public List<string> TaskIds { get; } Property Value Type Description List<string> Methods WithName(string) Declaration public TaskFolder WithName(string value) Parameters Type Name Description string value Returns Type Description TaskFolder WithTask(string) Declaration public TaskFolder WithTask(string taskId) Parameters Type Name Description string taskId Returns Type Description TaskFolder WithoutTask(string) Declaration public TaskFolder WithoutTask(string taskId) Parameters Type Name Description string taskId Returns Type Description TaskFolder"
  },
  "reference/TaskManagerCore.Model.TaskType.html": {
    "href": "reference/TaskManagerCore.Model.TaskType.html",
    "title": "Enum TaskType | QuickStart Documentation",
    "keywords": "Enum TaskType Namespace: TaskManagerCore.Model Assembly: TaskManagerCore.dll Syntax public enum TaskType Fields Name Description REPEATING REPEATING_STREAK SINGLE"
  },
  "reference/TaskManagerCore.Model.TimeInterval.html": {
    "href": "reference/TaskManagerCore.Model.TimeInterval.html",
    "title": "Enum TimeInterval | QuickStart Documentation",
    "keywords": "Enum TimeInterval Namespace: TaskManagerCore.Model Assembly: TaskManagerCore.dll Syntax public enum TimeInterval Fields Name Description Daily Fortnightly Hourly Monthly None Weekly Yearly"
  },
  "reference/TaskManagerCore.Model.html": {
    "href": "reference/TaskManagerCore.Model.html",
    "title": "Namespace TaskManagerCore.Model | QuickStart Documentation",
    "keywords": "Namespace TaskManagerCore.Model Classes HabitualTaskData RepeatingTaskData TaskData Immutable class (ie. 'record' after C# 9.0) - should it just be a struct? and should all business logic move up to an accessor/helper class? As per requirements: The Id does not have a publicly accessible setter (populated at construction and then passed through builder methods internally) Description, Notes, Completed, DueDate (Optional) Overdue method Structuring these classes for tests: Shift all date comparison logic up the hierarchy and keep this class lightweight, make another class handle and accept the date testing stuff Make this class accept a date provider object that can be controlled by the tests (will work but sullies the class with test related code) TaskFolder Immutable class (use 'record' after C# 9.0?) Or make this a struct and shift the logic to an accessor... As per requirements: The Id does not have a publicly accessible setter (populated at construction and then passed through builder methods internally) Name, List of Task Id's Overdue method Enums TaskType TimeInterval"
  },
  "reference/TaskManagerCore.TaskManagerFactory.html": {
    "href": "reference/TaskManagerCore.TaskManagerFactory.html",
    "title": "Class TaskManagerFactory | QuickStart Documentation",
    "keywords": "Class TaskManagerFactory Inheritance object TaskManagerFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskManagerCore Assembly: TaskManagerCore.dll Syntax public class TaskManagerFactory Methods CreateDefaultTaskManager() Declaration public static TaskController CreateDefaultTaskManager() Returns Type Description TaskController"
  },
  "reference/TaskManagerCore.html": {
    "href": "reference/TaskManagerCore.html",
    "title": "Namespace TaskManagerCore | QuickStart Documentation",
    "keywords": "Namespace TaskManagerCore Classes TaskManagerFactory"
  },
  "services/README.html": {
    "href": "services/README.html",
    "title": "Service Documentation | QuickStart Documentation",
    "keywords": "Service Documentation This section contains documentation of relevant service components: TaskController provides an API to basic task management functionality."
  },
  "services/TaskController/README.html": {
    "href": "services/TaskController/README.html",
    "title": "TaskController | QuickStart Documentation",
    "keywords": "TaskController The TaskController class is used to interact with Tasks and Folders in the system. An instance of the controller can be obtained from the TaskManagerFactory with the CreateDefaultTaskManager() static method. The controller accepts and returns Data Transfer Objects (DTOs) to separate front-end from back-end. Representing the Model data in the DTOs allows for flexibility of either layer without affecting the other. The following DTOs are used with the controller: CreateFolder CreateTask GetFolder GetTask If required, the persistence layer can be replaced (eg. with a SQLite database). Two interfaces need to be implemented and provided to the TaskController constructor: ITaskDataRepository ITaskFolderRepository"
  }
}